[{"C:\\workspace\\Foundry-Canvas-React\\src\\index.tsx":"1","C:\\workspace\\Foundry-Canvas-React\\src\\PaintTest6.tsx":"2","C:\\workspace\\Foundry-Canvas-React\\src\\models\\effect.ts":"3","C:\\workspace\\Foundry-Canvas-React\\src\\models\\wave.ts":"4","C:\\workspace\\Foundry-Canvas-React\\src\\models\\timeline.ts":"5","C:\\workspace\\Foundry-Canvas-React\\src\\models\\lights.ts":"6","C:\\workspace\\Foundry-Canvas-React\\src\\models\\walker.ts":"7","C:\\workspace\\Foundry-Canvas-React\\src\\models\\globalClock.ts":"8","C:\\workspace\\Foundry-Canvas-React\\src\\Canvas.tsx":"9","C:\\workspace\\Foundry-Canvas-React\\src\\ClockFace.tsx":"10","C:\\workspace\\Foundry-Canvas-React\\src\\models\\rxPubSub.ts":"11","C:\\workspace\\Foundry-Canvas-React\\src\\CanvasHook.ts":"12","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foShape2D.model.ts":"13","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foPage.model.ts":"14","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foObject.model.ts":"15","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foCollection.model.ts":"16","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foTools.ts":"17","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foLifecycle.ts":"18","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foMatrix2D.ts":"19","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foGlyph2D.model.ts":"20","C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foGeometry2D.ts":"21"},{"size":242,"mtime":1608595045288,"results":"22","hashOfConfig":"23"},{"size":5508,"mtime":1608609233813,"results":"24","hashOfConfig":"23"},{"size":2502,"mtime":1608607229957,"results":"25","hashOfConfig":"23"},{"size":3166,"mtime":1608604767679,"results":"26","hashOfConfig":"23"},{"size":7873,"mtime":1608608448163,"results":"27","hashOfConfig":"23"},{"size":6088,"mtime":1608609592534,"results":"28","hashOfConfig":"23"},{"size":825,"mtime":1608604732636,"results":"29","hashOfConfig":"23"},{"size":2618,"mtime":1608605941193,"results":"30","hashOfConfig":"23"},{"size":483,"mtime":1608604964659,"results":"31","hashOfConfig":"23"},{"size":2084,"mtime":1608604790845,"results":"32","hashOfConfig":"23"},{"size":406,"mtime":1608608195684,"results":"33","hashOfConfig":"23"},{"size":699,"mtime":1608595045223,"results":"34","hashOfConfig":"23"},{"size":5879,"mtime":1608595045282,"results":"35","hashOfConfig":"23"},{"size":5139,"mtime":1608595045277,"results":"36","hashOfConfig":"23"},{"size":10904,"mtime":1608595045275,"results":"37","hashOfConfig":"23"},{"size":3155,"mtime":1608604988682,"results":"38","hashOfConfig":"23"},{"size":14140,"mtime":1608605026689,"results":"39","hashOfConfig":"23"},{"size":6146,"mtime":1608605163379,"results":"40","hashOfConfig":"23"},{"size":9184,"mtime":1608595045274,"results":"41","hashOfConfig":"23"},{"size":17877,"mtime":1608605234650,"results":"42","hashOfConfig":"23"},{"size":7560,"mtime":1608595045268,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"z0frj2",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},"C:\\workspace\\Foundry-Canvas-React\\src\\index.tsx",[],["90","91"],"C:\\workspace\\Foundry-Canvas-React\\src\\PaintTest6.tsx",[],"C:\\workspace\\Foundry-Canvas-React\\src\\models\\effect.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\models\\wave.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\models\\timeline.ts",["92"],"import { foObject } from \"foundry/models/foObject.model\";\r\nimport { foPage } from \"foundry/models/foPage.model\";\r\nimport { foShape2D, IfoShape2DProperties } from \"foundry/models/foShape2D.model\";\r\nimport { Effect } from \"./effect\";\r\nimport { rxPubSub, rxPubSubClass } from \"./rxPubSub\";\r\n\r\nexport interface ITimeSpec {\r\n    timeScale: number;\r\n    startStep: number;\r\n    totalSteps: number;\r\n}\r\n\r\nexport interface ITimeTracker extends ITimeSpec {\r\n    timeScale: number;\r\n    startStep: number;\r\n    totalSteps: number;\r\n\r\n    currentTime(): number;\r\n    currentStep(): number;\r\n}\r\n\r\n\r\n\r\nexport class TimeTracker extends foObject implements ITimeTracker {\r\n    timeScale: number = 1;\r\n    startStep: number = 0;\r\n    totalSteps: number = 1;\r\n\r\n    _isWithinBoundary: boolean = false;\r\n\r\n    constructor(properties?: any, parent?: foObject) {\r\n        super(properties, parent);\r\n        this.override(properties);\r\n    }\r\n\r\n\r\n    setSpec(spec: ITimeSpec): TimeTracker {\r\n        this.timeScale = spec.timeScale;\r\n        this.startStep = spec.startStep;\r\n        this.totalSteps = spec.totalSteps;\r\n        return this;\r\n    }\r\n\r\n    get startTime(): number {\r\n        return this.startStep * this.timeScale;\r\n    }\r\n\r\n    get endTime(): number {\r\n        return this.endStep * this.timeScale;\r\n    }\r\n\r\n    get endStep(): number {\r\n        return (this.startStep + this.totalSteps);\r\n    }\r\n\r\n\r\n    get isWithinBoundary(): boolean {\r\n        return this._isWithinBoundary;\r\n    }\r\n\r\n    private _currentTime: number;\r\n    currentTime(): number {\r\n        return this._currentTime;\r\n    }\r\n\r\n    private _currentStep: number;\r\n    currentStep(): number {\r\n        return this._currentStep;\r\n    }\r\n\r\n    setTimecode(globalStep: number, globalTime: number):TimeTracker {\r\n        this._currentStep = globalStep - this.startStep;\r\n        this._currentTime = globalTime - this.startTime;\r\n\r\n        this._isWithinBoundary = false;\r\n        if (this._currentStep > 0 && this._currentStep < this.totalSteps) {\r\n            this._isWithinBoundary = true;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class TimeLinePage extends foPage {\r\n    groupId: number = 0;\r\n    stepWidth: number = 1;\r\n    timeTrack: TimeTracker = new TimeTracker();\r\n    pubsub: rxPubSubClass = new rxPubSubClass();\r\n\r\n    constructor(properties?: IfoShape2DProperties, parent?: foObject) {\r\n        super(properties, parent);\r\n\r\n        this.override(properties);\r\n        this.setPinLeft().setPinTop();\r\n    }\r\n\r\n    canvasParams(title: string = '') {\r\n        const label = `Group ${this.groupId}`;\r\n        const canvasParams = {\r\n            width: this.width,\r\n            height: this.height,\r\n            title: `${label}: ${title}`,\r\n            draw: (ctx: CanvasRenderingContext2D) => {\r\n                this.isDirty && this.render(ctx);\r\n            }\r\n        }\r\n\r\n        return canvasParams;\r\n    }\r\n\r\n\r\n    addEffect(item: Effect<TimeStep>): TimeLinePage {\r\n        item.groupId = this.groupId;\r\n        this.subcomponents.addMember(item);\r\n        this.markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    drawTimecode(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 10;\r\n\r\n        const top = this.marginY - this.y;\r\n        const height = this.height / this.scaleY;\r\n        const bottom = top + height;\r\n\r\n        //draw vertical...\r\n        let x = this.timeTrack.currentStep() * this.stepWidth;\r\n        ctx.moveTo(x, top);\r\n        ctx.lineTo(x, bottom);\r\n\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n\r\n    public drawLabel = (ctx: CanvasRenderingContext2D): void => {\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = 'black';\r\n        ctx.globalAlpha = 1.0;\r\n\r\n        let x = this.width / 2;\r\n        let y = this.height - 10;\r\n\r\n        ctx.font = '40px serif';\r\n        this.drawText(ctx, `page: ${this.timeTrack.currentStep()}`, x, y);\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    public draw = (ctx: CanvasRenderingContext2D): void => {\r\n        this.drawGrid(ctx);\r\n        //this.drawPage(ctx);\r\n        //this.drawLabel(ctx);\r\n        this.drawTimecode(ctx);\r\n    }\r\n\r\n\r\n    setTimecode(globalStep: number, globalTime: number):foPage {\r\n        this.timeTrack.setTimecode(globalStep, globalTime)\r\n\r\n        this._subcomponents?.forEach(item => {\r\n            const step = item as Effect<TimeStep>;\r\n            step.setTimecode(globalStep, globalTime);\r\n            if ( step.isSelected ){\r\n                this.pubsub.broadcast({\r\n                    groupId: this.groupId,\r\n                    data: step.activeStep()\r\n                })\r\n            }\r\n        });\r\n\r\n        return this.markAsDirty();\r\n    }\r\n}\r\n\r\n\r\nexport class TimeStep extends foShape2D {\r\n    color: string = 'blue';\r\n    opacity: number = 0.3;\r\n    _width: number = 10;\r\n    _height: number = 50;\r\n\r\n    constructor(properties?: IfoShape2DProperties, parent?: foObject) {\r\n        super(properties, parent);\r\n\r\n        this.override(properties);\r\n        this.setPinLeft().setPinTop();\r\n    }\r\n}\r\n\r\n\r\n\r\nexport interface ITimeLine2DProperties extends IfoShape2DProperties {\r\n    total?: number;\r\n    groupId?: number;\r\n}\r\n\r\nexport class TimeLine<T extends TimeStep> extends foShape2D implements ITimeLine2DProperties {\r\n    opacity: number = 1.0;\r\n    total: number;\r\n    groupId: number;\r\n    private _rebuild: any;\r\n\r\n\r\n    constructor(properties?: ITimeLine2DProperties, parent?: foObject) {\r\n        super(properties, parent);\r\n\r\n        this.override(properties);\r\n        this.setPinLeft().setPinTop();\r\n    }\r\n\r\n    clear() {\r\n        this.subcomponents.clearAll();\r\n    }\r\n    resetSize(i: number) {\r\n        this.total = i;\r\n        this._rebuild && this._rebuild();\r\n        return this;\r\n    }\r\n    horizontal(childType: { new(props?: IfoShape2DProperties): T }, props?: IfoShape2DProperties) {\r\n\r\n        this._rebuild = () => { this.horizontal(childType, props) };\r\n        if (this.subcomponents.length !== this.total) {\r\n            const source = new childType(props);\r\n            this.width = source.width * this.total;\r\n            this.height = source.height;\r\n\r\n            for (let i = 0; i < this.total; i++) {\r\n                const led = new childType({\r\n                    index: i,\r\n                    x: i * (source.width),\r\n                    y: 0,\r\n                    ...props,\r\n                });\r\n                this.subcomponents.addMember(led);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    vertical(childType: { new(props?: IfoShape2DProperties): T }, props?: IfoShape2DProperties) {\r\n\r\n        this._rebuild = () => { this.vertical(childType, props) };\r\n        if (this.subcomponents.length !== this.total) {\r\n            const source = new childType(props);\r\n            this.width = source.width;\r\n            this.height = source.height * this.total;\r\n\r\n            for (let i = 0; i < this.total; i++) {\r\n                const led = new TimeStep({\r\n                    index: i,\r\n                    x: (source.width / 2),\r\n                    y: i * (source.height) + (source.height / 2),\r\n                    ...props,\r\n                });\r\n                this.subcomponents.addMember(led);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    colorRollDown() {\r\n        const items = this.subcomponents.members\r\n        const start = items[0].color;\r\n        for (let i = 1; i < this.total; i++) {\r\n            items[i - 1].color = items[i].color;\r\n        }\r\n        items[this.total - 1].color = start;\r\n    }\r\n\r\n\r\n    colorRollUp() {\r\n        const items = this.subcomponents.members\r\n        const last = this.total - 1\r\n        const end = items[last].color;\r\n        for (let i = last; i > 0; i--) {\r\n            items[i].color = items[i - 1].color;\r\n        }\r\n        items[0].color = end;\r\n    }\r\n}\r\n\r\n\r\n\r\n","C:\\workspace\\Foundry-Canvas-React\\src\\models\\lights.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\models\\walker.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\models\\globalClock.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\Canvas.tsx",[],"C:\\workspace\\Foundry-Canvas-React\\src\\ClockFace.tsx",[],"C:\\workspace\\Foundry-Canvas-React\\src\\models\\rxPubSub.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\CanvasHook.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foShape2D.model.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foPage.model.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foObject.model.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foCollection.model.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foTools.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foLifecycle.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foMatrix2D.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foGlyph2D.model.ts",[],"C:\\workspace\\Foundry-Canvas-React\\src\\foundry\\models\\foGeometry2D.ts",["93","94"],"\r\nimport { iPoint2D, iRect, iBox, iMargin, iFrame } from './foInterface';\r\nimport { Vector2, Matrix3 } from 'three';\r\nexport { Vector2, Matrix3 } from 'three';\r\n\r\nexport class cPoint2D extends Vector2 implements iPoint2D {\r\n\r\n    public myName: string;\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number = 0, y: number = 0, name?: string) {\r\n        super(x, y);\r\n        this.myName = name;\r\n    }\r\n\r\n    asVector(): Vector2 {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n\r\n    setValues(x: number = 0, y: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    clonePoint(): cPoint2D {\r\n        return new cPoint2D(this.x, this.y, this.myName);\r\n    }\r\n\r\n    isEqualTo(p: cPoint2D): boolean {\r\n        return this.x === p.x && this.y === p.y;\r\n    }\r\n\r\n    isNear(p: cPoint2D, radius: number): boolean {\r\n        const dx = Math.abs(p.x - this.x);\r\n        if (dx > radius) { return false; }\r\n\r\n        const dy = Math.abs(p.y - this.y);\r\n        if (dy > radius) { return false; }\r\n        return true;\r\n\r\n    }\r\n\r\n    addPoint(x: number = 0, y: number = 0): cPoint2D {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n    subtractPoint(x: number = 0, y: number = 0): cPoint2D {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        return this;\r\n    }\r\n\r\n    midPoint(pt: cPoint2D): cPoint2D {\r\n        const x = (this.x + pt.x) / 2;\r\n        const y = (this.y + pt.y) / 2;\r\n        return new cPoint2D(x, y, 'midpoint');\r\n    }\r\n\r\n    mag(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    atan(): number {\r\n        return Math.atan2(this.y,  this.x);\r\n    }\r\n\r\n    normal(): cPoint2D {\r\n        let mag = this.mag();\r\n        mag = mag ? mag : 1.0; //if zero set to 1 you get the same result\r\n        return new cPoint2D(this.x / mag, this.y / mag, 'normal');\r\n    }\r\n\r\n    sum(p: cPoint2D): cPoint2D {\r\n        this.x += p.x;\r\n        this.y += p.y;\r\n        return this;\r\n    }\r\n\r\n    sumTo(p: cPoint2D): cPoint2D {\r\n        p.x += this.x;\r\n        p.y += this.y;\r\n        return p;\r\n    }\r\n\r\n    setTo(p: cPoint2D): cPoint2D {\r\n        p.x = this.x;\r\n        p.y = this.y;\r\n        return p;\r\n    }\r\n\r\n    subtract(p: cPoint2D): cPoint2D {\r\n        this.x -= p.x;\r\n        this.y -= p.y;\r\n        return this;\r\n    }\r\n\r\n    deltaBetween(pt: cPoint2D): cPoint2D {\r\n        const x = this.x - pt.x;\r\n        const y = this.y - pt.y;\r\n        return new cPoint2D(x, y, 'delta');\r\n    }\r\n\r\n    scale(s: number): cPoint2D {\r\n        this.x *= s;\r\n        this.y *= s;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class cRect implements iRect {\r\n    public x: number;\r\n    public y: number;\r\n    public width: number;\r\n    public height: number;\r\n    public myName: string;\r\n\r\n    constructor(x: number, y: number, width: number, height: number, name?: string) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.myName = name;\r\n    }\r\n\r\n    moveBy(x: number = 0, y: number = 0): iRect {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    moveTo(x: number = 0, y: number = 0): iRect {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    sizeBy(width: number, height: number): iRect {\r\n        this.width += width;\r\n        this.height += height;\r\n        return this;\r\n    }\r\n\r\n    sizeTo(width: number, height: number): iRect {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    set(x: number, y: number, width: number, height: number): iRect {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    contains(x: number, y: number) {\r\n        return this.x <= x && x <= this.x + this.width && this.y <= y && y <= this.y + this.height;\r\n    }\r\n\r\n    localContains(x: number, y: number): boolean {\r\n        return 0 <= x && x <= this.width && 0 <= y && y <= this.height;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, fill?: boolean) {\r\n        if (fill) {\r\n            ctx.fillRect(this.x, this.y, this.width, this.height);\r\n        } else {\r\n            ctx.rect(this.x, this.y, this.width, this.height);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\nexport class cFrame implements iFrame {\r\n    public x1: number;\r\n    public y1: number;\r\n    public x2: number;\r\n    public y2: number;\r\n\r\n    public point: cPoint2D = new cPoint2D();\r\n    public source: any;\r\n\r\n    constructor(source?: any) {\r\n        this.source = source;\r\n    }\r\n\r\n    set(x1: number, y1: number, x2: number, y2: number): iFrame {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        return this;\r\n    }\r\n\r\n    width(): number {\r\n        return this.x2 - this.x1;\r\n    }\r\n\r\n    heigth(): number {\r\n        return this.y2 - this.y1;\r\n    }\r\n\r\n    centerX(): number {\r\n        return (this.x2 + this.x1) / 2.0;\r\n    }\r\n\r\n    centerY(): number {\r\n        return (this.y2 + this.y1) / 2.0;\r\n    }\r\n\r\n    init(obj: iPoint2D): iFrame {\r\n        this.x1 = obj.x;\r\n        this.y1 = obj.y;\r\n        this.x2 = obj.x;\r\n        this.y2 = obj.y;\r\n        return this;\r\n    }\r\n\r\n    merge(obj: iFrame): iFrame {\r\n        this.x1 = Math.min(this.x1, obj.x1, obj.x2);\r\n        this.y1 = Math.min(this.y1, obj.y1, obj.y2);\r\n        this.x2 = Math.max(this.x2, obj.x2, obj.x1);\r\n        this.y2 = Math.max(this.y2, obj.y2, obj.y1);\r\n        return this;\r\n    }\r\n\r\n    minmax(obj: iPoint2D): iFrame {\r\n        this.x1 = Math.min(this.x1, obj.x);\r\n        this.y1 = Math.min(this.y1, obj.y);\r\n        this.x2 = Math.max(this.x2, obj.x);\r\n        this.y2 = Math.max(this.y2, obj.y);\r\n        return this;\r\n    }\r\n\r\n    contains(x: number, y: number) {\r\n        return this.x1 <= x && x <= this.x2 && this.y1 <= y && y <= this.y2;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, fill?: boolean) {\r\n        const width = this.x2 - this.x1;\r\n        const height = this.y2 - this.y1;\r\n        if (fill) {\r\n            ctx.fillRect(this.x1, this.y1, width, height);\r\n        } else {\r\n            ctx.rect(this.x1, this.y1, width, height);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class cMargin implements iMargin {\r\n    public left: number = 0;\r\n    public top: number = 0;\r\n    public right: number = 0;\r\n    public bottom: number = 0;\r\n\r\n\r\n    constructor(left: number = 0, top: number = 0, right: number = 0, bottom: number = 0) {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n    }\r\n\r\n    setAll(size: number = 0) {\r\n        this.left = size;\r\n        this.top = size;\r\n        this.right = size;\r\n        this.bottom = size;\r\n        return this;\r\n    }\r\n\r\n    get width() {\r\n        return this.left + this.right;\r\n    }\r\n    get height() {\r\n        return this.top + this.bottom;\r\n    }\r\n}\r\n\r\nexport class cBox extends cRect implements iBox {\r\n\r\n    constructor(x: number, y: number, width: number, height: number, name?: string) {\r\n        super(x, y, width, height, name);\r\n    }\r\n\r\n    pinX(): number {\r\n        return 0 * this.width;\r\n    }\r\n\r\n    pinY(): number {\r\n        return 0 * this.height;\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, fill?: boolean) {\r\n        if (fill) {\r\n            ctx.fillRect(this.x, this.y, this.width, this.height);\r\n        } else {\r\n            ctx.rect(this.x, this.y, this.width, this.height);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n",["95","96"],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"105","line":3,"column":19,"nodeType":"103","messageId":"104","endLine":3,"endColumn":26},{"ruleId":"106","severity":1,"message":"107","line":291,"column":5,"nodeType":"108","messageId":"109","endLine":293,"endColumn":6},{"ruleId":"97","replacedBy":"110"},{"ruleId":"99","replacedBy":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"@typescript-eslint/no-unused-vars","'rxPubSub' is defined but never used.","Identifier","unusedVar","'Matrix3' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["112"],["113"],"no-global-assign","no-unsafe-negation"]