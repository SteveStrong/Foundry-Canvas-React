[{"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\index.tsx":"1","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\PaintTest7.tsx":"2","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\lights.ts":"3","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\timeline.ts":"4","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\effect.ts":"5","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\globalClock.ts":"6","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\Canvas.tsx":"7","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\ClockFace.tsx":"8","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\core\\foRenderer.tsx":"9","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\rxPubSub.ts":"10","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\program.ts":"11","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\CanvasHook.ts":"12","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foObject.model.ts":"13","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foPage.model.ts":"14","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foShape2D.model.ts":"15","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foCollection.model.ts":"16","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foMatrix2D.ts":"17","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foTools.ts":"18","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foLifecycle.ts":"19","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foGlyph2D.model.ts":"20","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foGeometry2D.ts":"21","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\PaintFindings.tsx":"22","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foText2D.model.ts":"23","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foUnDo.ts":"24","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foPubSub.ts":"25","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\PaintTest1.tsx":"26"},{"size":290,"mtime":1612322549973,"results":"27","hashOfConfig":"28"},{"size":5338,"mtime":1610661893739,"results":"29","hashOfConfig":"28"},{"size":7408,"mtime":1608949064082,"results":"30","hashOfConfig":"28"},{"size":8552,"mtime":1608933105231,"results":"31","hashOfConfig":"28"},{"size":3384,"mtime":1608948637469,"results":"32","hashOfConfig":"28"},{"size":4413,"mtime":1608948629901,"results":"33","hashOfConfig":"28"},{"size":483,"mtime":1608917439681,"results":"34","hashOfConfig":"28"},{"size":2084,"mtime":1608917439682,"results":"35","hashOfConfig":"28"},{"size":1640,"mtime":1607314452076,"results":"36","hashOfConfig":"28"},{"size":406,"mtime":1608917439697,"results":"37","hashOfConfig":"28"},{"size":1857,"mtime":1609376316616,"results":"38","hashOfConfig":"28"},{"size":699,"mtime":1608481000880,"results":"39","hashOfConfig":"28"},{"size":10904,"mtime":1607314452086,"results":"40","hashOfConfig":"28"},{"size":5139,"mtime":1608481000893,"results":"41","hashOfConfig":"28"},{"size":5879,"mtime":1607826746524,"results":"42","hashOfConfig":"28"},{"size":3155,"mtime":1608917439685,"results":"43","hashOfConfig":"28"},{"size":9184,"mtime":1607397956264,"results":"44","hashOfConfig":"28"},{"size":14140,"mtime":1608917439690,"results":"45","hashOfConfig":"28"},{"size":6146,"mtime":1608917439689,"results":"46","hashOfConfig":"28"},{"size":17877,"mtime":1608917439688,"results":"47","hashOfConfig":"28"},{"size":7560,"mtime":1607315554112,"results":"48","hashOfConfig":"28"},{"size":2415,"mtime":1612322366270,"results":"49","hashOfConfig":"28"},{"size":11581,"mtime":1607397956270,"results":"50","hashOfConfig":"28"},{"size":2590,"mtime":1607397956272,"results":"51","hashOfConfig":"28"},{"size":815,"mtime":1607314452098,"results":"52","hashOfConfig":"28"},{"size":4203,"mtime":1607562927026,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1x4sejr",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\index.tsx",["109"],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\PaintTest7.tsx",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\lights.ts",[],["110","111"],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\timeline.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\effect.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\globalClock.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\Canvas.tsx",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\ClockFace.tsx",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\core\\foRenderer.tsx",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\rxPubSub.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\models\\program.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\CanvasHook.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foObject.model.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foPage.model.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foShape2D.model.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foCollection.model.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foMatrix2D.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foTools.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foLifecycle.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foGlyph2D.model.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foGeometry2D.ts",["112","113"],"\r\nimport { iPoint2D, iRect, iBox, iMargin, iFrame } from './foInterface';\r\nimport { Vector2, Matrix3 } from 'three';\r\nexport { Vector2, Matrix3 } from 'three';\r\n\r\nexport class cPoint2D extends Vector2 implements iPoint2D {\r\n\r\n    public myName: string;\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number = 0, y: number = 0, name?: string) {\r\n        super(x, y);\r\n        this.myName = name;\r\n    }\r\n\r\n    asVector(): Vector2 {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n\r\n    setValues(x: number = 0, y: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    clonePoint(): cPoint2D {\r\n        return new cPoint2D(this.x, this.y, this.myName);\r\n    }\r\n\r\n    isEqualTo(p: cPoint2D): boolean {\r\n        return this.x === p.x && this.y === p.y;\r\n    }\r\n\r\n    isNear(p: cPoint2D, radius: number): boolean {\r\n        const dx = Math.abs(p.x - this.x);\r\n        if (dx > radius) { return false; }\r\n\r\n        const dy = Math.abs(p.y - this.y);\r\n        if (dy > radius) { return false; }\r\n        return true;\r\n\r\n    }\r\n\r\n    addPoint(x: number = 0, y: number = 0): cPoint2D {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n    subtractPoint(x: number = 0, y: number = 0): cPoint2D {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        return this;\r\n    }\r\n\r\n    midPoint(pt: cPoint2D): cPoint2D {\r\n        const x = (this.x + pt.x) / 2;\r\n        const y = (this.y + pt.y) / 2;\r\n        return new cPoint2D(x, y, 'midpoint');\r\n    }\r\n\r\n    mag(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    atan(): number {\r\n        return Math.atan2(this.y,  this.x);\r\n    }\r\n\r\n    normal(): cPoint2D {\r\n        let mag = this.mag();\r\n        mag = mag ? mag : 1.0; //if zero set to 1 you get the same result\r\n        return new cPoint2D(this.x / mag, this.y / mag, 'normal');\r\n    }\r\n\r\n    sum(p: cPoint2D): cPoint2D {\r\n        this.x += p.x;\r\n        this.y += p.y;\r\n        return this;\r\n    }\r\n\r\n    sumTo(p: cPoint2D): cPoint2D {\r\n        p.x += this.x;\r\n        p.y += this.y;\r\n        return p;\r\n    }\r\n\r\n    setTo(p: cPoint2D): cPoint2D {\r\n        p.x = this.x;\r\n        p.y = this.y;\r\n        return p;\r\n    }\r\n\r\n    subtract(p: cPoint2D): cPoint2D {\r\n        this.x -= p.x;\r\n        this.y -= p.y;\r\n        return this;\r\n    }\r\n\r\n    deltaBetween(pt: cPoint2D): cPoint2D {\r\n        const x = this.x - pt.x;\r\n        const y = this.y - pt.y;\r\n        return new cPoint2D(x, y, 'delta');\r\n    }\r\n\r\n    scale(s: number): cPoint2D {\r\n        this.x *= s;\r\n        this.y *= s;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class cRect implements iRect {\r\n    public x: number;\r\n    public y: number;\r\n    public width: number;\r\n    public height: number;\r\n    public myName: string;\r\n\r\n    constructor(x: number, y: number, width: number, height: number, name?: string) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.myName = name;\r\n    }\r\n\r\n    moveBy(x: number = 0, y: number = 0): iRect {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    moveTo(x: number = 0, y: number = 0): iRect {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    sizeBy(width: number, height: number): iRect {\r\n        this.width += width;\r\n        this.height += height;\r\n        return this;\r\n    }\r\n\r\n    sizeTo(width: number, height: number): iRect {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    set(x: number, y: number, width: number, height: number): iRect {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    contains(x: number, y: number) {\r\n        return this.x <= x && x <= this.x + this.width && this.y <= y && y <= this.y + this.height;\r\n    }\r\n\r\n    localContains(x: number, y: number): boolean {\r\n        return 0 <= x && x <= this.width && 0 <= y && y <= this.height;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, fill?: boolean) {\r\n        if (fill) {\r\n            ctx.fillRect(this.x, this.y, this.width, this.height);\r\n        } else {\r\n            ctx.rect(this.x, this.y, this.width, this.height);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\nexport class cFrame implements iFrame {\r\n    public x1: number;\r\n    public y1: number;\r\n    public x2: number;\r\n    public y2: number;\r\n\r\n    public point: cPoint2D = new cPoint2D();\r\n    public source: any;\r\n\r\n    constructor(source?: any) {\r\n        this.source = source;\r\n    }\r\n\r\n    set(x1: number, y1: number, x2: number, y2: number): iFrame {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        return this;\r\n    }\r\n\r\n    width(): number {\r\n        return this.x2 - this.x1;\r\n    }\r\n\r\n    heigth(): number {\r\n        return this.y2 - this.y1;\r\n    }\r\n\r\n    centerX(): number {\r\n        return (this.x2 + this.x1) / 2.0;\r\n    }\r\n\r\n    centerY(): number {\r\n        return (this.y2 + this.y1) / 2.0;\r\n    }\r\n\r\n    init(obj: iPoint2D): iFrame {\r\n        this.x1 = obj.x;\r\n        this.y1 = obj.y;\r\n        this.x2 = obj.x;\r\n        this.y2 = obj.y;\r\n        return this;\r\n    }\r\n\r\n    merge(obj: iFrame): iFrame {\r\n        this.x1 = Math.min(this.x1, obj.x1, obj.x2);\r\n        this.y1 = Math.min(this.y1, obj.y1, obj.y2);\r\n        this.x2 = Math.max(this.x2, obj.x2, obj.x1);\r\n        this.y2 = Math.max(this.y2, obj.y2, obj.y1);\r\n        return this;\r\n    }\r\n\r\n    minmax(obj: iPoint2D): iFrame {\r\n        this.x1 = Math.min(this.x1, obj.x);\r\n        this.y1 = Math.min(this.y1, obj.y);\r\n        this.x2 = Math.max(this.x2, obj.x);\r\n        this.y2 = Math.max(this.y2, obj.y);\r\n        return this;\r\n    }\r\n\r\n    contains(x: number, y: number) {\r\n        return this.x1 <= x && x <= this.x2 && this.y1 <= y && y <= this.y2;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, fill?: boolean) {\r\n        const width = this.x2 - this.x1;\r\n        const height = this.y2 - this.y1;\r\n        if (fill) {\r\n            ctx.fillRect(this.x1, this.y1, width, height);\r\n        } else {\r\n            ctx.rect(this.x1, this.y1, width, height);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class cMargin implements iMargin {\r\n    public left: number = 0;\r\n    public top: number = 0;\r\n    public right: number = 0;\r\n    public bottom: number = 0;\r\n\r\n\r\n    constructor(left: number = 0, top: number = 0, right: number = 0, bottom: number = 0) {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n    }\r\n\r\n    setAll(size: number = 0) {\r\n        this.left = size;\r\n        this.top = size;\r\n        this.right = size;\r\n        this.bottom = size;\r\n        return this;\r\n    }\r\n\r\n    get width() {\r\n        return this.left + this.right;\r\n    }\r\n    get height() {\r\n        return this.top + this.bottom;\r\n    }\r\n}\r\n\r\nexport class cBox extends cRect implements iBox {\r\n\r\n    constructor(x: number, y: number, width: number, height: number, name?: string) {\r\n        super(x, y, width, height, name);\r\n    }\r\n\r\n    pinX(): number {\r\n        return 0 * this.width;\r\n    }\r\n\r\n    pinY(): number {\r\n        return 0 * this.height;\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, fill?: boolean) {\r\n        if (fill) {\r\n            ctx.fillRect(this.x, this.y, this.width, this.height);\r\n        } else {\r\n            ctx.rect(this.x, this.y, this.width, this.height);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\PaintFindings.tsx",["114","115"],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foText2D.model.ts",["116","117"],"import { Tools } from './foTools';\r\nimport { cMargin } from './foGeometry2D';\r\n\r\nimport { foObject } from './foObject.model';\r\nimport { foGlyph2D } from './foGlyph2D.model';\r\n\r\nimport { foShape2D, IfoShape2DProperties } from './foShape2D.model';\r\n\r\nimport { foUnDo } from './foUnDo';\r\n\r\nimport { RuntimeType } from './foRuntimeType';\r\n\r\n// ctx.textAlign = \"left\" || \"right\" || \"center\" || \"start\" || \"end\";\r\n\r\n// ctx.textBaseline = \"top\" || \"hanging\" || \"middle\" || \"alphabetic\" || \"ideographic\" || \"bottom\";\r\n\r\n// ctx.font = '48px serif';\r\n// ctx.font = \"20px Georgia\";\r\n// ctx.font = \"italic 10pt Courier\";\r\n// ctx.font = \"bold 10pt Courier\";\r\n// ctx.font = \"italic bold 10pt Courier\";\r\n\r\nexport interface IfoText2DProperties extends IfoShape2DProperties {\r\n  text?: string;\r\n  fontSize?: number;\r\n  font?: string;\r\n\r\n  background?: string;\r\n}\r\n\r\n//a Shape is a graphic designed to behave like a visio shape\r\n//and have all the same properties\r\nexport class foText2D extends foShape2D implements IfoText2DProperties {\r\n  public text: string;\r\n  public textAlign: string;\r\n  public textBaseline: string;\r\n\r\n  public margin: cMargin;\r\n  public fontSize: number;\r\n  public font: string;\r\n  public resize: boolean = false;\r\n\r\n  protected _background: string;\r\n  get background(): string {\r\n    return this._background || this.color;\r\n  }\r\n  set background(value: string) {\r\n    this._background = value;\r\n  }\r\n\r\n  public pinX = (): number => {\r\n    return 0.5 * this.width;\r\n  }\r\n  public pinY = (): number => {\r\n    return 0.5 * this.height;\r\n  }\r\n\r\n  constructor(\r\n    properties?: IfoText2DProperties,\r\n    parent?: foObject\r\n  ) {\r\n    super(properties, parent);\r\n\r\n    this.override(properties);\r\n    this.setupPreDraw();\r\n  }\r\n\r\n  protected toJson(): any {\r\n    return Tools.mixin(super.toJson(), {\r\n      text: this.text,\r\n      background: this.background,\r\n      fontSize: this.fontSize,\r\n      margin: this.margin\r\n    });\r\n  }\r\n\r\n  get size(): number {\r\n    return this.fontSize || 12;\r\n  }\r\n\r\n  updateContext(ctx: CanvasRenderingContext2D) {\r\n    super.updateContext(ctx);\r\n\r\n    this.drawFont(ctx, this.size, this.font, this.textAlign, this.textBaseline);\r\n  }\r\n\r\n  setupPreDraw() {\r\n    const preDraw = (ctx: CanvasRenderingContext2D): void => {\r\n      if (this.resize) {\r\n        const textMetrics = ctx.measureText(this.text);\r\n        this.width = textMetrics.width + ((this.margin && this.margin.width) || 0);\r\n        this.height = this.size + ((this.margin && this.margin.height) || 0);\r\n      }\r\n      //this.createConnectionPoints();\r\n      //this.createHandles();\r\n      this.preDraw = undefined;\r\n    };\r\n\r\n    this.preDraw = preDraw;\r\n  }\r\n\r\n  public splitText(ctx: CanvasRenderingContext2D, text: string, maxWidth: number): Array<string> {\r\n    const result: Array<string> = new Array<string>();\r\n    const words = text.replace(':', ': ').split(' ');\r\n\r\n    let firstWord = words[0];\r\n    let size = ctx.measureText(firstWord);\r\n    const perChar = size.width / firstWord.length;\r\n    const maxChar = Math.ceil(maxWidth / perChar) - 3;\r\n\r\n    //fill result based on running size\r\n    let phrase = '';\r\n    words.forEach(word => {\r\n      if (phrase.length + word.length + 1 <= maxChar) {\r\n        phrase += ` ${word}`;\r\n      } else {\r\n        result.push(phrase);\r\n        phrase = `${word}`;\r\n      }\r\n    });\r\n    result.push(phrase);\r\n\r\n    return result;\r\n  }\r\n\r\n  public drawOutline(ctx: CanvasRenderingContext2D) {\r\n    ctx.beginPath();\r\n    ctx.setLineDash([15, 5]);\r\n    ctx.rect(0, 0, this.width, this.height);\r\n    ctx.stroke();\r\n  }\r\n\r\n  public drawDefaultSelected(ctx: CanvasRenderingContext2D) {\r\n    ctx.strokeStyle = 'red';\r\n    ctx.lineWidth = 1;\r\n    this.drawOutline(ctx);\r\n    //this.drawHandles(ctx);\r\n    //this.drawConnectionPoints(ctx);\r\n    this.drawPin(ctx);\r\n  }\r\n\r\n  public drawSelected = this.drawDefaultSelected;\r\n\r\n  public drawBackground = (ctx: CanvasRenderingContext2D): void => {\r\n    ctx.fillStyle = this.background;\r\n    ctx.fillRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  public maxTextWidth() {\r\n    return this.width;\r\n  }\r\n\r\n  public drawTextBox(ctx: CanvasRenderingContext2D, text: string) {\r\n    const left = (this.margin && this.margin.left) || 0;\r\n    const top = (this.margin && this.margin.top) || 0;\r\n    \r\n    // let x = this.pinX() + left;\r\n    let x = this.width/2 +  left;\r\n\r\n    //let y = this.pinY() + top;\r\n    let y = this.height/2 + top;\r\n\r\n    let dy = this.size + 4;\r\n\r\n    let list = this.splitText(ctx, text, this.maxTextWidth());\r\n    y -= (list.length / 2) * dy;\r\n    list.forEach(txt => {\r\n      this.drawText(ctx, txt, x, y);\r\n      y += dy; //rule of thumb to prevent true measure\r\n    });\r\n  }\r\n\r\n  public draw = (ctx: CanvasRenderingContext2D): void => {\r\n\r\n    ctx.save();\r\n\r\n    if (this.background) {\r\n      this.drawBackground(ctx);\r\n    }\r\n\r\n    ctx.fillStyle = this.color;\r\n\r\n    this.drawTextBox(ctx, this.text);\r\n    //this.drawTextCircle(ctx, this.text.toUpperCase(), 0.46 * this.width, 0, this.pinX(), this.pinY());\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport class foInputText2D extends foText2D {\r\n  private UnDo: foUnDo = new foUnDo();\r\n  private isEditing: boolean = false;\r\n  private showCursor: boolean = false;\r\n  private cursorStart: number;\r\n  private cursorEnd: number;\r\n\r\n  private timer: any;\r\n  private undoRoot: any;\r\n  private initState: any;\r\n\r\n  private setState(state: any) {\r\n    this.text = state.text;\r\n    this.cursorStart = state.start;\r\n    this.cursorEnd = state.end;\r\n  }\r\n\r\n  private getState() {\r\n    return { text: this.text, start: this.cursorStart, end: this.cursorEnd };\r\n  }\r\n\r\n  public doubleClick = (keys: any) => {\r\n  }\r\n\r\n  public openEditor = () => {\r\n    this.isEditing = true;\r\n    this.drawSelected = this.drawIsEditing;\r\n    this.timer = setInterval(() => {\r\n      this.showCursor = !this.showCursor;\r\n    }, 600);\r\n    this.cursorStart = this.cursorEnd = this.text.length;\r\n    this.initState = this.getState();\r\n\r\n    this.UnDo.registerActions(\r\n      'shapeTextChanged',\r\n      p => {\r\n        return p;\r\n      },\r\n      p => {\r\n        return p;\r\n      },\r\n      (o, n) => {\r\n        return o !== n;\r\n      }\r\n    );\r\n  }\r\n\r\n  public closeEditor = () => {\r\n    this.isEditing = false;\r\n    this.drawSelected = this.drawDefaultSelected;\r\n    clearInterval(this.timer);\r\n    this.UnDo.clear();\r\n  }\r\n\r\n  public addCharacter(char) {\r\n    const state = this.getState();\r\n    if (this.UnDo.verifyKeep(this.undoRoot, state)) {\r\n      this.undoRoot = this.UnDo.do('shapeTextChanged', state);\r\n    }\r\n\r\n    const text =\r\n      this.text.slice(0, this.cursorStart) +\r\n      char +\r\n      this.text.slice(this.cursorEnd);\r\n    this.text = text;\r\n    this.cursorStart += 1;\r\n    this.cursorEnd = this.cursorStart;\r\n  }\r\n\r\n  public delCharacter() {\r\n    if (this.cursorStart === 0) return;\r\n\r\n    const state = this.getState();\r\n    if (this.UnDo.verifyKeep(this.undoRoot, state)) {\r\n      this.undoRoot = this.UnDo.do('shapeTextChanged', state);\r\n    }\r\n\r\n    const text =\r\n      this.text.slice(0, this.cursorStart - 1) +\r\n      this.text.slice(this.cursorEnd);\r\n    this.text = text;\r\n    this.cursorStart -= 1;\r\n    this.cursorEnd = this.cursorStart;\r\n  }\r\n\r\n  public sendKeys = (e: KeyboardEvent, keys: any) => {\r\n    if (keys.ctrl && e.key === 'e') {\r\n      this.isEditing ? this.closeEditor() : this.openEditor();\r\n    } else if (keys.ctrl && e.key === 'z') {\r\n      this.UnDo.canUndo() && this.setState(this.UnDo.unDo());\r\n    } else if (this.isEditing) {\r\n      this.editText(e, keys);\r\n    }\r\n    this.setupPreDraw();\r\n  }\r\n\r\n  editText(e: KeyboardEvent, keys: any) {\r\n    if (keys.ctrl && e.key === 'a') {\r\n      this.cursorStart = 0;\r\n      this.cursorEnd = this.text.length;\r\n    } else if (keys.ctrl) {\r\n      return;\r\n    } else if (e.keyCode >= 48 && e.keyCode <= 90) {\r\n      this.addCharacter(e.key);\r\n    } else if (e.keyCode === 32) {\r\n      //space\r\n      this.addCharacter(e.key);\r\n    } else if (e.keyCode === 46) {\r\n      //del\r\n      this.delCharacter();\r\n    } else if (e.keyCode === 8) {\r\n      //backspace\r\n      this.delCharacter();\r\n    } else {\r\n      this.processKeys(e, keys);\r\n    }\r\n  }\r\n\r\n  // 27: \"esc\",\r\n  // 32: \"space\",\r\n  // 33: \"pageup\",\r\n  // 34: \"pagedown\",\r\n  // 35: \"end\",\r\n  // 36: \"home\",\r\n  // 37: \"left\",\r\n  // 38: \"up\",\r\n  // 39: \"right\",\r\n  // 45: \"insert\",\r\n  // 46: \"delete\",\r\n\r\n  processKeys(e: KeyboardEvent, keys: any) {\r\n    const select = keys.shift;\r\n    switch (e.keyCode) {\r\n      case 36: // home\r\n        this.cursorStart = 0;\r\n        if (!select) this.cursorEnd = this.cursorStart;\r\n        break;\r\n      case 35: // end\r\n        this.cursorEnd = this.text.length;\r\n        if (!select) this.cursorStart = this.cursorEnd;\r\n        break;\r\n      case 37: // left\r\n        if (this.cursorStart > 0) {\r\n          this.cursorStart -= 1;\r\n          if (!select) this.cursorEnd = this.cursorStart;\r\n        }\r\n        break;\r\n      case 39: // right\r\n        if (this.cursorEnd < this.text.length) {\r\n          this.cursorEnd += 1;\r\n          if (!select) this.cursorStart = this.cursorEnd;\r\n        }\r\n        break;\r\n      case 13: // return\r\n        this.closeEditor();\r\n        break;\r\n      case 27: // esc\r\n        this.setState(this.initState);\r\n        this.closeEditor();\r\n        break;\r\n      default:\r\n        if (e.key.length === 1) {\r\n          this.addCharacter(e.key);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  public drawIsEditing(ctx: CanvasRenderingContext2D) {\r\n    ctx.strokeStyle = 'green';\r\n    ctx.lineWidth = 1;\r\n    ctx.beginPath();\r\n    ctx.rect(0, 0, this.width, this.height);\r\n    ctx.stroke();\r\n\r\n    this.drawSelect(ctx);\r\n    this.showCursor && this.drawCursor(ctx);\r\n    this.draw(ctx);\r\n  }\r\n\r\n  public drawSelect(ctx: CanvasRenderingContext2D) {\r\n    if (this.cursorStart === this.cursorEnd) return;\r\n\r\n    const textStart = this.text.substr(0, this.cursorStart);\r\n    const start = ctx.measureText(textStart);\r\n    const startPos = start.width + ((this.margin && this.margin.width) || 0);\r\n\r\n    const textEnd = this.text.substr(0, this.cursorEnd);\r\n    const end = ctx.measureText(textEnd);\r\n    const endPos = end.width + ((this.margin && this.margin.width) || 0);\r\n\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fillRect(startPos, 0, endPos - startPos, this.height);\r\n  }\r\n\r\n  public drawCursor(ctx: CanvasRenderingContext2D) {\r\n    const textStart = this.text.substr(0, this.cursorStart);\r\n    const start = ctx.measureText(textStart);\r\n    const startPos = start.width + ((this.margin && this.margin.width) || 0);\r\n\r\n    ctx.fillStyle = 'red';\r\n    ctx.fillRect(startPos, 0, 2, this.height);\r\n  }\r\n\r\n  // drawMultiLineText(ctx: CanvasRenderingContext2D, text: string) {\r\n\r\n  //     //let textMetrics = ctx.measureText(text);\r\n\r\n  //     ctx.textAlign = \"left\" || \"right\" || \"center\" || \"start\" || \"end\";\r\n\r\n  //     ctx.textBaseline = \"top\" || \"hanging\" || \"middle\" || \"alphabetic\" || \"ideographic\" || \"bottom\";\r\n\r\n  //     ctx.font = '48px serif';\r\n  //     ctx.font = \"20px Georgia\";\r\n  //     ctx.font = \"italic 10pt Courier\";\r\n  //     ctx.font = \"bold 10pt Courier\";\r\n  //     ctx.font = \"italic bold 10pt Courier\";\r\n\r\n  //     //http://junerockwell.com/end-of-line-or-line-break-in-html5-canvas/\r\n  //     let fontsize = 60;\r\n  //     let array = text.split('|');\r\n  //     let dx = 10;\r\n  //     let dy = 20;\r\n  //     for (var i = 0; i < array.length; i++) {\r\n  //         ctx.fillText(array[i], dx, dy);\r\n  //         dy += (fontsize + 4);\r\n  //     }\r\n\r\n  // }\r\n}\r\n\r\n\r\n//RuntimeType.define(foText2D);\r\n//RuntimeType.define(foInputText2D);\r\n","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foUnDo.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\foundry\\models\\foPubSub.ts",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\PaintTest1.tsx",["118","119","120"],{"ruleId":"121","severity":1,"message":"122","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":23},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"121","severity":1,"message":"129","line":3,"column":19,"nodeType":"123","messageId":"124","endLine":3,"endColumn":26},{"ruleId":"130","severity":1,"message":"131","line":291,"column":5,"nodeType":"132","messageId":"133","endLine":293,"endColumn":6},{"ruleId":"121","severity":1,"message":"134","line":56,"column":11,"nodeType":"123","messageId":"124","endLine":56,"endColumn":16},{"ruleId":"121","severity":1,"message":"135","line":75,"column":32,"nodeType":"123","messageId":"124","endLine":75,"endColumn":36},{"ruleId":"121","severity":1,"message":"136","line":5,"column":10,"nodeType":"123","messageId":"124","endLine":5,"endColumn":19},{"ruleId":"121","severity":1,"message":"137","line":11,"column":10,"nodeType":"123","messageId":"124","endLine":11,"endColumn":21},{"ruleId":"121","severity":1,"message":"138","line":12,"column":8,"nodeType":"123","messageId":"124","endLine":12,"endColumn":13},{"ruleId":"121","severity":1,"message":"134","line":99,"column":15,"nodeType":"123","messageId":"124","endLine":99,"endColumn":20},{"ruleId":"121","severity":1,"message":"139","line":135,"column":11,"nodeType":"123","messageId":"124","endLine":135,"endColumn":18},"@typescript-eslint/no-unused-vars","'PaintFindings' is defined but never used.","Identifier","unusedVar","no-native-reassign",["140"],"no-negated-in-lhs",["141"],"'Matrix3' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'label' is assigned a value but never used.","'list' is assigned a value but never used.","'foGlyph2D' is defined but never used.","'RuntimeType' is defined but never used.","'rules' is defined but never used.","'rawdata' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]