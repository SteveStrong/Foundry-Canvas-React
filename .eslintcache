[{"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\App.tsx":"1","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\Canvas.tsx":"2","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\CanvasHook.ts":"3","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\index.tsx":"4","C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\core\\foRenderer.tsx":"5"},{"size":1377,"mtime":1607302884547,"results":"6","hashOfConfig":"7"},{"size":517,"mtime":1607302617322,"results":"8","hashOfConfig":"7"},{"size":1080,"mtime":1607300788778,"results":"9","hashOfConfig":"7"},{"size":200,"mtime":1607284035886,"results":"10","hashOfConfig":"7"},{"size":1693,"mtime":1607301576662,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x4sejr",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\App.tsx",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\Canvas.tsx",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\CanvasHook.ts",["25"],"import { useRef, useEffect } from 'react';\r\n\r\nexport const useCanvas2D = (draw: (arg0: CanvasRenderingContext2D, arg1: number) => void) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  const clear = (ctx: CanvasRenderingContext2D) => {\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  };\r\n\r\n  const border = (ctx: CanvasRenderingContext2D) => {\r\n    ctx.fillStyle = 'green';\r\n    ctx.strokeRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let animationFrameId: number;\r\n    let frameCount = 0;\r\n    if (canvasRef.current) {\r\n      const canvas: HTMLCanvasElement = canvasRef.current;\r\n      const context: CanvasRenderingContext2D = canvas.getContext('2d');\r\n      \r\n      const render = () => {\r\n        clear(context);\r\n        border(context);\r\n        frameCount++;\r\n        draw(context, frameCount);\r\n        animationFrameId = window.requestAnimationFrame(render);\r\n      };\r\n      render();\r\n    }\r\n\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [draw]);\r\n\r\n  return canvasRef;\r\n};\r\n",["26","27"],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\index.tsx",[],"C:\\Users\\Steve\\workspace\\FoundryDotNet5\\foundry-canvas-react\\src\\core\\foRenderer.tsx",["28","29","30"],"import React, { FunctionComponent, ReactElement, createElement, useMemo } from 'react';\r\nimport { RuntimeTypes, API_LIST_SEPARATOR, API_REFERENCE_KEY, Constructable } from './runtime-type';\r\n\r\nexport const EmptyRender: FunctionComponent = (): ReactElement => {\r\n    return <div>Empty component displayed if no component is available in FoRender class</div>;\r\n};\r\n\r\n\r\n\r\nexport interface IfoRenderViewModel{}\r\n\r\nexport class foRender<T extends IfoRenderViewModel> {\r\n    props: T = {} as T;\r\n    Component: React.FunctionComponent<T> = EmptyRender;\r\n    \r\n    display(props?: T) {\r\n        if (props) {\r\n            this.props = { ...this.props, ...props};\r\n        }\r\n        return createElement(this.Component, this.props);\r\n    }\r\n    \r\n}\r\n\r\nexport interface IfoComponentViewModel{ }\r\n\r\nexport class foComponent<T extends IfoComponentViewModel> {\r\n    props: T = {} as T;\r\n    Component: React.FunctionComponent<T> = EmptyRender;\r\n\r\n    display(props?: T) {\r\n        if (props) {\r\n             this.props = { ...this.props, ...props};\r\n        }\r\n        return createElement(this.Component, this.props);\r\n    }\r\n}\r\n\r\nexport const useComponentClass = <S, T extends foComponent<S>>(Implementation: Constructable<T>, props: S): ReactElement => {\r\n    return useMemo(() => new Implementation(), [Implementation]).display(props);\r\n};\r\n\r\nexport const useRenderClass = <T extends foRender<any>>(Implementation: Constructable<T>): foRender<any> => {\r\n    return useMemo(() => {\r\n        return new Implementation();\r\n    }, [Implementation]);\r\n};\r\n\r\n",{"ruleId":"31","severity":1,"message":"32","line":3,"column":7,"nodeType":"33","messageId":"34","endLine":3,"endColumn":18},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"31","severity":1,"message":"39","line":2,"column":10,"nodeType":"33","messageId":"34","endLine":2,"endColumn":22},{"ruleId":"31","severity":1,"message":"40","line":2,"column":24,"nodeType":"33","messageId":"34","endLine":2,"endColumn":42},{"ruleId":"31","severity":1,"message":"41","line":2,"column":44,"nodeType":"33","messageId":"34","endLine":2,"endColumn":61},"@typescript-eslint/no-unused-vars","'useCanvas2D' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["42"],"no-negated-in-lhs",["43"],"'RuntimeTypes' is defined but never used.","'API_LIST_SEPARATOR' is defined but never used.","'API_REFERENCE_KEY' is defined but never used.","no-global-assign","no-unsafe-negation"]